class Game
{
    field Wolf wolf;
    field int score, eggDelay, eggDelayCounter;
    field boolean isOver;
    field Random random;
    field Queue eggsGroup;
    field Array GroupsHeads;

    constructor Game new()
    {
        let wolf = Wolf.new();
        let score = 0;
        let eggDelay = 15;
        let eggDelayCounter = eggDelay;
        let isOver = false;
        let random = Random.new();
        let eggsGroup = Queue.new();
        let GroupsHeads = Array.new(4);
        return this;
    }

    method void run()
    {
        var char key;
        var int position;

        do Graphics.drawBackground();
        do drawScore();
        do Chicken.drawRightChicken(32 * 124 + 30);
        do Chicken.drawRightChicken(32 * 67 + 30);
        do Chicken.drawLeftChicken(32 * 124);
        do Chicken.drawLeftChicken(32 * 67);

        while (~isOver)
        {
            let key = Keyboard.keyPressed();
            if (key = 52){ let position = 0;}
            if (key = 53){ let position = 1;}
            if (key = 49){ let position = 2;}
            if (key = 50){ let position = 3;}

            do wolf.setPosition(position);
            do wolf.draw();

            do Sys.wait(250);

            //проходится по группам яиц,двигая их и проверяя не упали ли какие либо яйца
            do goThrewEggs();

            //ускорение игры
            if (score > 10){let eggDelay = 13;}
            if (score > 19){let eggDelay = 9;}
            if (score > 26){let eggDelay = 6;}
            if (score > 36){let eggDelay = 4;}

            if (eggDelayCounter - ((eggDelayCounter/eggDelay)*eggDelay) = 0)
            {
                let eggDelayCounter = 1;
                do throwEgg();
            }
            else{let eggDelayCounter = eggDelayCounter + 1;}
        }
        //отрисовка фона при проигрыше
        do Screen.clearScreen();
        do Graphics.drawEndBackground(32*106+13);
        return;
    }

    method void goThrewEggs()
    {
        var QueueItem item;
        var boolean fell,label;
        var Egg egg;

        let label = false;
        let item = eggsGroup.getHead();

        while (~(item = null))
        {
            let egg = item.getEgg();
            let fell = egg.changeScreenPosition();
            if (fell){let label = true;}
            let item = item.getNext();
        }

        if (label)
        {
            let egg = eggsGroup.dequeue();
            if (~(wolf.getPosition() = egg.getPosition())){let isOver = true;}
            else
            {
                let score = score + 1;
                do drawScore();
            }
            do Screen.setColor(false);
            do egg.draw();
            do egg.dispose();
        }
        return;
    }

    method void throwEgg()
    {
        var int groupNumber;
        var boolean label;

        let groupNumber = random.rand();

        let label = false;

        //идём по всем местам, для спавная яиц от рандомного пока не находим где нет в начале яйца, далее кидаем туда яйцо
        while (~label)
        {
            let label = tryPush(groupNumber);
            let groupNumber = groupNumber + 1 - (((groupNumber + 1) / 4) * 4);
        }
        return;
    }

    method boolean tryPush(int groupNumber)//если не может кинуть в выбранное место яйцо, возвращает false иначе true и кидает его
    {
        var Egg newEgg;
        var Egg tailEgg;

        let tailEgg = GroupsHeads[groupNumber];

        if (~(tailEgg = null))
        {
            if(tailEgg.getStage() = 0){return false;}
        }
        let newEgg = Egg.new(groupNumber);
        let GroupsHeads[groupNumber] = newEgg;
        do eggsGroup.enqueue(newEgg);

        return true;
    }
    //отрисовка счёта
    method void drawScore()
    {
        var int counter;
        var int ost;
        var int pos;

        let pos = 250;
        let counter = score;
        do Screen.setColor(false);
        do Screen.drawRectangle(pos-30, 10, pos+10, 19);
        do Screen.setColor(true);
        if(counter = 0){do drawNumber(0, pos);}
        while(~(counter = 0))
        {
            let ost = counter - ((counter / 10)*10);
            do drawNumber(ost, pos);
            let counter = counter / 10;
            let pos = pos - 10;
        }
        return;
    }

    //методы рисующие части цифр,вид цифр:
    // ||||||
    // ||  ||
    // ||||||
    // ||  ||
    // ||||||
    method void drawNumber(int number,int position)
    {
        if(number = 0)
        {
            do Screen.drawRectangle(position, 10, position + 5, 11);//верхняя горизонтальная
            do Screen.drawRectangle(position, 10, position + 1, 15);//верхняя левая вертикальная
            do Screen.drawRectangle(position + 4, 10, position + 5, 15);//верхняя правая вертикальная
            do Screen.drawRectangle(position, 14, position + 1, 19);//нижняя левая вертикальная
            do Screen.drawRectangle(position + 4, 14, position + 5, 19);//нижняя правая вертикальная
            do Screen.drawRectangle(position, 18, position + 5, 19);//нижняя горизонтальная
        }
        if(number = 1)
        {
            do Screen.drawRectangle(position + 4, 10, position + 5, 15);//верхняя правая вертикальная
            do Screen.drawRectangle(position + 4, 14, position + 5, 19);//нижняя правая вертикальная
        }
        if(number = 2)
        {
            do Screen.drawRectangle(position, 10, position + 5, 11);//верхняя горизонтальная
            do Screen.drawRectangle(position + 4, 10, position + 5, 15);//верхняя правая вертикальная
            do Screen.drawRectangle(position, 14, position + 5, 15);//посередине горизонтальная
            do Screen.drawRectangle(position, 14, position + 1, 19);//нижняя левая вертикальная
            do Screen.drawRectangle(position, 18, position + 5, 19);//нижняя горизонтальная
        }
        if(number = 3)
        {
            do Screen.drawRectangle(position, 10, position + 5, 11);//верхняя горизонтальная
            do Screen.drawRectangle(position + 4, 10, position + 5, 15);//верхняя правая вертикальная
            do Screen.drawRectangle(position, 14, position + 5, 15);//посередине горизонтальная
            do Screen.drawRectangle(position + 4, 14, position + 5, 19);//нижняя правая вертикальная
            do Screen.drawRectangle(position, 18, position + 5, 19);//нижняя горизонтальная
        }
        if(number = 4)
        {
            do Screen.drawRectangle(position, 10, position + 1, 15);//верхняя левая вертикальная
            do Screen.drawRectangle(position + 4, 10, position + 5, 15);//верхняя правая вертикальная
            do Screen.drawRectangle(position, 14, position + 5, 15);//посередине горизонтальная
            do Screen.drawRectangle(position + 4, 14, position + 5, 19);//нижняя правая вертикальная
        }
        if(number = 5)
        {
            do Screen.drawRectangle(position, 10, position + 5, 11);//верхняя горизонтальная
            do Screen.drawRectangle(position, 10, position + 1, 15);//верхняя левая вертикальная
            do Screen.drawRectangle(position, 14, position + 5, 15);//посередине горизонтальная
            do Screen.drawRectangle(position + 4, 14, position + 5, 19);//нижняя правая вертикальная
            do Screen.drawRectangle(position, 18, position + 5, 19);//нижняя горизонтальная
        }
        if(number = 6)
        {
            do Screen.drawRectangle(position, 10, position + 5, 11);//верхняя горизонтальная
            do Screen.drawRectangle(position, 10, position + 1, 15);//верхняя левая вертикальная
            do Screen.drawRectangle(position, 14, position + 5, 15);//посередине горизонтальная
            do Screen.drawRectangle(position, 14, position + 1, 19);//нижняя левая вертикальная
            do Screen.drawRectangle(position + 4, 14, position + 5, 19);//нижняя правая вертикальная
            do Screen.drawRectangle(position, 18, position + 5, 19);//нижняя горизонтальная
        }
        if(number = 7)
        {
            do Screen.drawRectangle(position, 10, position + 5, 11);//верхняя горизонтальная
            do Screen.drawRectangle(position + 4, 10, position + 5, 15);//верхняя правая вертикальная
            do Screen.drawRectangle(position + 4, 14, position + 5, 19);//нижняя правая вертикальная
        }
        if(number = 8)
        {
            do Screen.drawRectangle(position, 10, position + 5, 11);//верхняя горизонтальная
            do Screen.drawRectangle(position, 10, position + 1, 15);//верхняя левая вертикальная
            do Screen.drawRectangle(position + 4, 10, position + 5, 15);//верхняя правая вертикальная
            do Screen.drawRectangle(position, 14, position + 5, 15);//посередине горизонтальная
            do Screen.drawRectangle(position, 14, position + 1, 19);//нижняя левая вертикальная
            do Screen.drawRectangle(position + 4, 14, position + 5, 19);//нижняя правая вертикальная
            do Screen.drawRectangle(position, 18, position + 5, 19);//нижняя горизонтальная
        }
        if(number = 9)
        {
            do Screen.drawRectangle(position, 10, position + 5, 11);//верхняя горизонтальная
            do Screen.drawRectangle(position, 10, position + 1, 15);//верхняя левая вертикальная
            do Screen.drawRectangle(position + 4, 10, position + 5, 15);//верхняя правая вертикальная
            do Screen.drawRectangle(position, 14, position + 5, 15);//посередине горизонтальная
            do Screen.drawRectangle(position + 4, 14, position + 5, 19);//нижняя правая вертикальная
            do Screen.drawRectangle(position, 18, position + 5, 19);//нижняя горизонтальная
        }
        return;
    }

    method void dispose()
    {
        do wolf.dispose();
        do eggsGroup.dispose();

        do Memory.deAlloc(this);
		return;
    }
}
